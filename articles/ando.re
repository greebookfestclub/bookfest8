
= コードレビューの心得

== 概要
コードレビューの際にどのような観点でコードを確認するかに記述していきます。

== 観点
ロジックの正しさ以外にも下記の評価でコードをチェックします。

 * コード全体のフォーマットがチーム基準に即しているか？

 * 余計なimportやincludeを含んでいないか？（C#だとusingディレクティブ）

 * コードの可読性、視認性

 * クラスやメソッドの役割を逸脱していないか？

 * デバッグしやすさ

 * コメントの内容が適切かどうか

== 詳細
=== ロジックの正しさ
コードレビューで一番大切なことですが、一番確認が難しいところでもあります。
なるべくコメントを多く残したり、シンプルな構造にしたりする工夫をしてください。

また、一気に巨大なコミットをレビューするというのはレビュアーにとって大きな負担になります。
できるだけ、小さい単位でレビューを受けるようにしてください。

その他、下記の点もレビューの観点になります。

 * 同一のロジックが2箇所以上で書かれていないか

 * コピペでコードを持ってきた場合にコピペ元の不要なコードが入っていないか

 * メソッド名から想定しづらいような副作用が存在しないこと、もしくはドキュメント化されていること

=== コード全体のフォーマットがチーム基準に即しているか
チーム全体でコードのフォーマッタは統一することが望ましいです。
ただし、それ以外にもgitでのレビューが行いやすいように、タブやインデントをソフトタブにするのは必須です。（インデントやタブの深さはチームで決めてよし）

またフォーマッタ以外にもチーム内でのコード規約は基本的に遵守しましょう（googleやMSのコード規約に則るのが無難かと思われます）

//blankline
 * C# のコーディング規則 (C# プログラミング ガイド)

https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/inside-a-program/coding-conventions

 * Google Style Guides

https://github.com/google/styleguide/

=== 余計なimportやincludeを含んでいないか？（C#だとusingディレクティブ）
Objective-CやC/C++では、不要なコンパイルが走ることがあり開発効率に大きく影響します。

C#ではそのような問題は起きないのですが、IL2CPPなどでC++コードに置き換えるフローの中で、余計なコード解析が走ることになるので、結局のところ開発効率に関わります。

可能な限り、綺麗な状態を保つようにしましょう。

=== コードの可読性、視認性
いくつか例をあげます。

 * コードの間隔を適度に空ける。ぎゅっと詰まっているコードは見にくい

　　（しかし、レビュー段階で指摘しにくいのでできるだけホスピタリティを意識して

　　ください）

 * 適切なネスト深さ心がける

　　４段、５段になる場合、ネストの中身を別のメソッドに置き換えたほうが見やすい。

　　またラムダ式を入れ子にして深いネストになるようなことを可能な限り避ける。

 * 一行に長過ぎる処理を記述しない。

　　次のデバッグしやすさにも起因するのですが、長い数式や複数の処理を一行にまと

　　めてしまうと、レビュアーが見づらいだけではなくデバッガでステップ実行の際に

　　変数の変更を追うのが難しくなります。

　　基本的には下記のように心がけてください

　　　- 1行には1命令

　　　- テキストエディタを横スクロールしないと見れないような長い式は分割する。

　　　- if文などで、括弧の中にメソッドを記述しない。（変数等に戻り値を保持して、

　　　　それをconditionとする）

　　　- &&演算子、||演算子を使いすぎない。

　　　- 1行のif文を使わない。必ず括弧付きにするのが望ましい。
//emlist[][c]{
if (hoge == null) return 0;
//}
　　　　ではなく、
//emlist[][c]{
if (hoge == null) {
  return 0;
}
//}
　　　　とする。

 * ローカル変数をメンバ変数を区別できるような記述を心がける（プレフィックス、サフィックス、this記述など）

 * クラス、メソッド、変数の名前をあまり省略しない（かといって長過ぎるのは問題をはらんでいる可能性があるので、設計を見直す）

 * 同一のロジックが2箇所以上で書かれていないか

　　ただし、ラムダ式などでごく短いセンテンスが重複する程度（５行程度）は許容す

　　る（インライン展開での実行速度を考慮して）

　　Don't repeat yourself(DRY)原則を遵守する

 * コピペでコードを持ってきた場合にコピペ元の不要なコードが入っていないか

 * メソッド名から想定しづらいような副作用が存在しないこと、もしくはドキュメント化されていること

 * 複雑な処理はコメント記述して、説明を残すようにする。（アルゴリズム名などを書くのもよい）

=== クラスやメソッドの役割を逸脱していないか？
プロジェクトごとによるが、下記の観点で評価を行う

 * その開発環境において、標準的なコーディングが行われているか？

　　（UnityならUnityらしさ、cocos2d-xならcocos2d-xといったゲームエンジンや

　　プラットフォームに即した標準的な構造や設計というものを準拠すべき）

 * そのクラスにふさわしくない処理を記述していないか？

　　（ModelクラスにControlクラスが行うべき処理を実装するなど）

 * ひとつのメソッドに極端に処理を記述しすぎていないか？
　　処理を適切に分割して構造を明確にしておく


=== デバッグしやすさ
コードの可読性の項にも記述しましたが、一行に複数の処理を記述するとステップ実行の際に処理を追いにくくなり、バグを生む可能性が高まります。
ローカル変数などを利用し、一行のセンテンスが短いものがよいコードだと思います。
//blankline
ラムダ式やコルーチンでは、ブレイクポイントのあとのコールスタックを追えなかったり、ブレイクポイントでストップできない場合などもあり、これらの仕組みは大変便利ですが、大きな処理は直接記述せずに、別メソッド内で行うのが望ましいです。
またラムダ式やコルーチンがネストするようなコーディングは大きな複雑性を孕むので、このような構造になる場合、本当に必要な構造なのか設計を見直すキッカケになります。
//blankline
テンプレートクラスやジェネリッククラスはうまく使えば大変便利なものですが、乱用によりプロジェクトを複雑にする一面もあります。
できるだけ組込みのものを使うようにして、自分でどうしても定義が必要な場合は、他のレビュアーに説明ができるようにしてください。（詳細なコメントを残すのも有効です）

=== コメントが適切かどうか
コードは他人に見られるものだという前提を忘れないようにしてください。
過去にコメントに倫理的に不適切なワードを残したり、ふざけて書いたものが移管先へ共有されるという不幸な事故が他社で発生しています。
//blankline
リファクタリングや処理の変更によって、昔書いたコメントが逆にミスリードを生む場合もあります。
コメント自体が修正されるのがベストですが、誤ったコメントを残すぐらいなら、ざっくり削除したほうがマシなケースも多いので、心がけてください。

== 最後に
@<em>{コードレビューは断罪するものに非ず}

コードレビューはコミュニケーションと多くの視点によって、よりよいプログラムを作っていくものです。
この原点に帰ると、実装者がどう設計すべきか、レビュアーがどのように評価すべきかが、自ずと見えてくると思います。
//blankline
@<em>{コードレビューの心得}

実装者は萎縮せずバンバンレビューしてもらって、自身のコーディング能力を上げていきましょう。
レビュアーは実装者のコードが洗練されてきたら褒めてあげましょう。”あやつは儂が育てた”と胸を張って明言してもよいか思います。